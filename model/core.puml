@startuml
' Aggregate
skinparam packageStyle Rectangle
hide empty members

package Game as "ゲーム" <<Package>> {
  package Concept {
    abstract Tile as "牌 [Tile]"
    abstract Meld as "面子" <Tile>
    Tile <. Meld
  }

  package {
    class Table as "**雀卓**" {
      ' deal tiles
      配牌(): void
    }

    interface TileDealingSpec as "配牌仕様" <Tile>
    TileDealingSpec <- Table

    class Progress as "進行状況" {
      ' hand: [round, handNumberInRound]
      局: [場風,integer]
      ' extraHandNumber
      本場数: integer
    }

    Table --> Progress

    class WallTiles as "壁牌" <Tile>
    Table --> "0..*" WallTiles

    class SupplementalTiles as "嶺上牌" <Tile>
    Table --> "0..*" SupplementalTiles: 通常4枚以下

    class RewardIndicationTiles as "ドラ表示牌" <Tile> {
      ' isOpen
      is公開: boolean
    }
    Table --> "*" RewardIndicationTiles: 通常4枚x2
  }

  package {
      enum Action as "行動"
      together {
        class Discard as "打牌" <Tile>
        Action -- Discard
        class Pass as "無視"
        Action -- Pass
        class MakeMeld as "副露（広義）" <Tile>
        Action -- MakeMeld
        class DeclareReady as "立直" <Tile>
        Action -- DeclareReady
        class Complete as "上がり"
        Action -- Complete
      }
  }

  package {
    class Player as "**プレイヤー**" {
      ' point
      持ち点: integer
    }
    Table <--> "1..*" Player: 通常4人

    interface ActionPolicy as "行動ポリシー"
    Player -> ActionPolicy

    class p_Hand as "手持牌" <Tile>
    Player --> "*" p_Hand: 通常14枚以下

    class DiscardedTiles as "河" <Tile>
    Player --> "0..*" DiscardedTiles

    class ExposedMelds as "公開面子" <Tile>
    Player --> "0..*" ExposedMelds: 通常4組以下
    ExposedMelds --> Meld
  }
}

package Rule as "ルール" <<Package>> {
  package UsingConcept as "使用Concept" {
    class TileImpl as "使用牌"

    enum MeldImpl as "使用面子" <Tile>
    together {
      class Pong as "刻子" <Tile>
      MeldImpl -- Pong

      class Chow as "順子" <Tile>
      MeldImpl -- Chow

      class Kong as "槓子" <Tile>
      MeldImpl -- Kong
    }
  }
  UsingConcept --|> Concept

  interface r_Hand as "役" <Tile>
  enum NormalYaku as "通常役" {
    ' "fan"
    飜数: integer
  }
  r_Hand -- NormalYaku
  enum YakumanYaku as "役満役"
  r_Hand -- YakumanYaku

  together {
    class AllTriplets as "対々和" <Tile>
    r_Hand <|-- AllTriplets

    class AllGreen as "緑一色" <Tile>
    r_Hand <|-- AllGreen

    abstract joker as "*" <Tile>
    r_Hand <|-- joker
  }

  class PointCalculator as "点数計算サービス" {
    ' calculate
    計算(雀卓,役): integer
  }
  PointCalculator ..> Table
  PointCalculator ..> r_Hand

  class PointCalculationConfiguration as "設定" {
    ' is "double Yakuman" enabled
    isダブル役満有り: boolean
    ...
  }
  PointCalculator --> PointCalculationConfiguration

  interface PointSystem as "得点系"
  PointCalculator --> PointSystem
  class NormalSystem as "通常システム"
  PointSystem <|-- NormalSystem
  class UnlimitedSystem as "青天井"
  PointSystem <|-- UnlimitedSystem

  class TileDealingSpecImpl as "配牌仕様実装"
  TileDealingSpecImpl --|> TileDealingSpec
}
Rule --+ Game

package Tactics as "戦術" <<Package>> {
  class ActionPolicyImpl as "使用行動ポリシー"
  ActionPolicyImpl --|> ActionPolicy

  class ActionAfterOtherPlayersActionPolicyImpl as "使用他家行動後行動ポリシー" {
    行動決定（？）: 他家行動後行動
  }
  ActionPolicyImpl --> ActionAfterOtherPlayersActionPolicyImpl
  ActionAfterOtherPlayersActionPolicyImpl ..> Action

  class ActionAfterDrawingPolicyImpl as "使用自摸後行動ポリシー" {
    行動決定(？): 自摸後行動
  }
  ActionPolicyImpl --> ActionAfterDrawingPolicyImpl
  ActionAfterDrawingPolicyImpl ..> Action
}
Tactics --+ Game
Tactics --+ Rule

@enduml